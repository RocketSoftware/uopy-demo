window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "uopy", "modulename": "uopy", "kind": "module", "doc": "<p>UniObjects for Python is a Python package from Rocket Software. It is a client API that allows Python applications\nto access Rocket MV Databases over the network.</p>\n\n<p>Specifically, it enables Python developers to:</p>\n\n<pre><code>1) remotely connect to MV databases\n\n1) call BASIC catalogued subroutines\n\n2) run TCL commands\n\n3) read/write MV files\n\n4) handle MV dynamic arrays\n\n5) manage MV SELECT lists\n\n6) control MV transactions\n</code></pre>\n\n<p>Configuration:</p>\n\n<pre><code>UOPY supports a list of configuration parameters. They are grouped into 4 categories: connection, pooling, logging,\nand ssl_auth. Internally all the configuration parameters are preset to default values deemed to work for a minimal\nUOPY application development environment. To override these default values, UOPY supports an external\nconfiguration file - 'uopy.ini', in which a user can specify different values for some or all of the parameters. In\nsome cases, this enables users to change how the application behaves without having to make any code changes, such\nas turning connection pooling on and off or making all connections to the database secure.\n\nFor example, on Windows 10 (US-English), the default parameter values are:\n\n    connection: {'host': 'localhost', 'account': 'XDEMO', 'port': 31438, 'timeout': 300, 'service': 'defcs',\n    'encoding': 'cp1252', 'ssl': False}\n\n    pooling: {'pooling_on': False, 'min_pool_size': 1, 'max_pool_size': 10, 'max_wait_time': 30,\n    'idle_remove_threshold': 300, 'idle_remove_interval': 300}\n\n    logging: {'level': 'WARNING', 'format': 'standard', 'dir': './logs', 'file_name': 'uopy.log', 'max_size': 524288,\n    'backup_count': 5, 'unirpc_debug': False, 'log_data_max_size': 1024}\n\n    ssl_auth: {'client_auth_required': False, 'server_cert_file': '', 'client_cert_file': '', 'client_key_file': '',\n    'check_hostname': False}\n\nIf the uopy.ini file is present in the current working directory with the following settings:\n\n    [connection]\n    host = uv1211.rocketsoftware.com\n    account = XDEMO\n    port = 41438\n    timeout = 100\n    service = udcs\n    ssl = True\n\n    [ssl_auth]\n    server_cert_file=\"c:\\temp\\desktop-ppdt4ds.crt\"\n\n    [pooling]\n    pooling_on = True\n    max_wait_time = 60\n    idle_remove_threshold = 300\n    idle_remove_interval = 300\n    min_pool_size = 5\n    max_pool_size = 15\n\n    [logging]\n    level = DEBUG\n    backup_count = 10\n    log_data_max_size = 256\n\nthen when uopy is imported, it will combine uopy.ini with the internal default configuration, resulting in the\nactual runtime configuration (see the Examples below). Please note that most of these configuration values cannot\nbe changed by the application at runtime, with the exception of the values in the connection category and the pool\nsize values in the pooling category, which can be passed in with different values to uopy.connect().\n</code></pre>\n\n<p>Logging:</p>\n\n<pre><code>UOPY uses a rotating log strategy which is configurable in uopy.ini as shown above.\n\nSpecifically,\n    level: the logging level, can be CRITICAL(50), ERROR(40), WARNING (30, default), INFO(20), DEBUG(10).\n\n    format: can be standard or simple - the difference is that source code line no is provided in the standard format.\n\n    dir: the directory where log files are stored.\n\n    file_name: the log file name.\n\n    max_size: the maximum size of a single log file.\n\n    backup_count: the number of backup log files to rotate through.\n\n    unirpc_debug: if set to True and the logging level is DEBUG, all UniRPC packets are dumped into the log files.\n\n    log_data_max_size: the maximum length for any data logged when logging level is DEBUG - the default is 1k.\n        For instance, if a subroutine parameter is a XML string greater than 1K in size, it will be truncated to 1K\n        in the log file.\n</code></pre>\n\n<p>Constants:</p>\n\n<pre><code>UV_SERVICE, UD_SERVICE, DEFAULT_SERVICE: standard service names for back-end UO servers.\n\nDATA_FILE, DICT_FILE: used when creating a File object to indicate which part of the file should be opened.\n\nLOCK_WAIT, LOCK_RETAIN, LOCK_EXCLUSIVE, LOCK_SHARED: locking behaviors when working with records of hashed files.\n\nEXEC_COMPLETE, EXEC_REPLY, EXEC_MORE_OUTPUT: Command execution status codes.\n\nAtVar: an enum of supported MV @variables.\n\nUOLocale(Enum): an enum of UniVerse locale definitions.\n\nDEFAULT_MARKS: a named tuple containing the default MV delimiters (marks).\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>&gt;&gt;&gt; import uopy\n&gt;&gt;&gt; uopy.config.connection\n{'host': 'uv1211.rocketsoftware.com', 'account': 'XDEMO', 'port': 41438, 'timeout': 100, 'service': 'udcs',\n'encoding': 'cp1252', 'ssl': True}\n\n&gt;&gt;&gt; uopy.config.pooling\n{'pooling_on': True, 'min_pool_size': 5, 'max_pool_size': 15, 'max_wait_time': 60, 'idle_remove_threshold': 300,\n'idle_remove_interval': 300}\n\n&gt;&gt;&gt; uopy.config.logging\n{'level': 'DEBUG', 'format': 'standard', 'dir': './logs', 'file_name': 'uopy.log', 'max_size': 524288,\n'backup_count': 10, 'unirpc_debug': False, 'log_data_max_size': 256}\n\n&gt;&gt;&gt; uopy.config.ssl_auth\n{'client_auth_required': False, 'server_cert_file': 'c:\\temp\\desktop-ppdt4ds.crt', 'client_cert_file': '',\n'client_key_file': '', 'check_hostname': False}\n\n&gt;&gt;&gt; with uopy.connect(user='test', password='test'):\n&gt;&gt;&gt;     cmd = uopy.Command(\"LIST VOC\")\n&gt;&gt;&gt;     cmd.run()\n&gt;&gt;&gt;     print(cmd.response[-20:])\n'68 records listed.\n</code></pre>\n\n<p>'</p>\n\n<p>__version__:\n    Use uopy.__version__ to get the uopy version</p>\n"}, {"fullname": "uopy.connect", "modulename": "uopy", "qualname": "connect", "kind": "function", "doc": "<p>Open a connection to an MV Database.</p>\n\n<p>Args:\n    kwargs: connection configuration keyword parameters:  host, port, user, password, account, service, timeout,\n            encoding, ssl, min_pool_size, max_pool_size.</p>\n\n<pre><code>        1. only user and password are required, the rest have default values in uopy.config.connection.\n\n        2. if connection pooling is turned on and connect() is called for the first time to open a connection\n        to the database server, a connection pool will be created for the same host, account, user and password\n        that are passed in. If min_pool_size and/or max_pool_size are passed in as well, they will be used\n        instead of the default values in the uopy.config.pooling section to set the minimum and maximum pool\n        sizes. Note that once a connection pool is created, its min_pool_size and max_pool_size cannot be\n        changed. This means that the min_pool_size and max_pool_size parameters are ignored on subsequent calls\n        to connect() for the same pool.\n</code></pre>\n\n<p>Returns:\n    A Session object: either newly established or straight from a connection pool.</p>\n\n<p>Raises:\n    UOError, ValueError</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>session = uopy.connect(user = 'test', password ='test')</p>\n\n<pre><code>&gt;&gt;&gt; session = uopy.connect(host ='localhost', user = 'test', password ='test', account = 'HS.SALES',\n            service=uopy.UV_SERVICE, port=31438)\n\n&gt;&gt;&gt; config = {\n        'user': 'test',\n        'password': 'test',\n        'service': 'udcs',\n        'account': 'demo',\n        'encoding': 'GB18030',\n        'ssl': True\n    }\n&gt;&gt;&gt; session = uopy.connect(**config)\n</code></pre>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.config", "modulename": "uopy", "qualname": "config", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;uopy._config._Config object&gt;"}, {"fullname": "uopy.Session", "modulename": "uopy", "qualname": "Session", "kind": "class", "doc": "<p>A Session represents a MV database connection. It is the foundation for and embedded in other UOPY objects.</p>\n\n<p>Session objects can be used in Python with statement so that whatever happens in the with statement block, they\nare guaranteed to be closed upon exit.</p>\n\n<p>Applications can also perform transactions on a Session, and get supported @var values from the server.</p>\n\n<p>Note:\n    Applications should call uopy.connect() to get a Session object instead of directly instantiating a Session.</p>\n\n<p>Examples:</p>\n\n<pre><code>&gt;&gt;&gt; with uopy.connect(user='test', password='test'):\n&gt;&gt;&gt;     cmd = uopy.Command(\"LIST VOC\")\n&gt;&gt;&gt;     cmd.run()\n&gt;&gt;&gt;     print(cmd.response)\n\n\n&gt;&gt;&gt; with uopy.connect(user=\"test\", password=\"test\") as session:\n&gt;&gt;&gt;     session.tx_start()\n&gt;&gt;&gt;     print(session.tx_is_active())\n...\n&gt;&gt;&gt;     session.tx_commit()\n</code></pre>\n"}, {"fullname": "uopy.Session.__init__", "modulename": "uopy", "qualname": "Session.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">connect_config</span></span>)</span>"}, {"fullname": "uopy.Session.is_active", "modulename": "uopy", "qualname": "Session.is_active", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uopy.Session.marks", "modulename": "uopy", "qualname": "Session.marks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uopy.Session.bind_pool", "modulename": "uopy", "qualname": "Session.bind_pool", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.config", "modulename": "uopy", "qualname": "Session.config", "kind": "variable", "doc": "<p>A copy of all the configuration parameters for this session.</p>\n"}, {"fullname": "uopy.Session.idle_start_time", "modulename": "uopy", "qualname": "Session.idle_start_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uopy.Session.start_idle", "modulename": "uopy", "qualname": "Session.start_idle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.db_type", "modulename": "uopy", "qualname": "Session.db_type", "kind": "variable", "doc": "<p>str: either \"UD' for UniData,'UV' for UniVerse, or \"D3\" for D3.</p>\n"}, {"fullname": "uopy.Session.is_nls_enabled", "modulename": "uopy", "qualname": "Session.is_nls_enabled", "kind": "variable", "doc": "<p>boolean: whether NLS is enabled on the server.</p>\n"}, {"fullname": "uopy.Session.encoding", "modulename": "uopy", "qualname": "Session.encoding", "kind": "variable", "doc": "<p>The name of the character encoding used for conversion between Python unicode strings and MV data.</p>\n\n<p>By default it is set to the local system's preferred encoding when server NLS is off, and to UTF-8 when\nserver NLS is on. However it can be overridden by the application to what reflects the actual encoding of\nthe server data.</p>\n"}, {"fullname": "uopy.Session.uoserver_timeout", "modulename": "uopy", "qualname": "Session.uoserver_timeout", "kind": "variable", "doc": "<p>The following code snippet retrieves the UO Server timeout value after connecting to the server:\nses = uopy.connect(user=user,password=passwd)\nuotimeout = ses.uoserver_timeout\nOn the server side, the timeout can be set in the unirpcservice file and passed as an argument when the uvapi_server process is started.</p>\n"}, {"fullname": "uopy.Session.sync_marks", "modulename": "uopy", "qualname": "Session.sync_marks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mark_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.encode", "modulename": "uopy", "qualname": "Session.encode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.decode", "modulename": "uopy", "qualname": "Session.decode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.rpc_call", "modulename": "uopy", "qualname": "Session.rpc_call", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_packet</span>, </span><span class=\"param\"><span class=\"n\">out_packet</span>, </span><span class=\"param\"><span class=\"n\">in_exec</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.read_packet4cmd", "modulename": "uopy", "qualname": "Session.read_packet4cmd", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.connect", "modulename": "uopy", "qualname": "Session.connect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.check_rpc_error", "modulename": "uopy", "qualname": "Session.check_rpc_error", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.health_check", "modulename": "uopy", "qualname": "Session.health_check", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.hard_close", "modulename": "uopy", "qualname": "Session.hard_close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.get_atvar", "modulename": "uopy", "qualname": "Session.get_atvar", "kind": "function", "doc": "<p>Get a @var value from the server.</p>\n\n<p>Args:\n    atvar: uopy.AtVar enum.</p>\n\n<p>Returns:\n    DynArray: the value of the @var</p>\n\n<p>Raises:\n    UOError</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>import uopy\n      for atvar in uopy.AtVar:\n                  print(atvar.name, atvar.value)</p>\n\n<pre><code>LOG_NAME 1\nPATH 2\nUSER_NO 3\nWHO 4\nTRANSACTION 5\nDATA_PENDING 6\nUSER_RETURN_CODE 7\nSYSTEM_RETURN_CODE 8\nNULL_STR 9\nSCHEMA 10\nTRANSACTION_LEVEL 11\n\n&gt;&gt;&gt;\n&gt;&gt;&gt; with uopy.connect(user='test_user', password='test_password') as session:\n        log_name = session.get_atvar(uopy.AtVar.LOG_NAME)\n        account_path = session.get_atvar(uopy.AtVar.PATH)\n        print(log_name)\n        print(account_path)\n\ntest_user\nC:\\U2\\ud82\\XDEMO\n</code></pre>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">atvar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.reset", "modulename": "uopy", "qualname": "Session.reset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.close", "modulename": "uopy", "qualname": "Session.close", "kind": "function", "doc": "<p>Close the session or return it to the connection pool.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.bind_command", "modulename": "uopy", "qualname": "Session.bind_command", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">command_obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.tx_start", "modulename": "uopy", "qualname": "Session.tx_start", "kind": "function", "doc": "<p>Start a transaction on the server.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.tx_commit", "modulename": "uopy", "qualname": "Session.tx_commit", "kind": "function", "doc": "<p>Commit the current transaction on the server.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.tx_rollback", "modulename": "uopy", "qualname": "Session.tx_rollback", "kind": "function", "doc": "<p>Roll back the current transaction on the server.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.tx_level", "modulename": "uopy", "qualname": "Session.tx_level", "kind": "function", "doc": "<p>Return the current transaction level on the server</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    int: the current transaction level</p>\n\n<p>Raises:\n     UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Session.tx_is_active", "modulename": "uopy", "qualname": "Session.tx_is_active", "kind": "function", "doc": "<p>Check if a transaction is active on the server.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    True/False: in transaction or not</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Command", "modulename": "uopy", "qualname": "Command", "kind": "class", "doc": "<p>Command allows applications to run MV ECL/TCL commands or stored procedures on the remote server.</p>\n\n<p>After a command is executed, it can have one of these three status:\n    EXEC_COMPLETE: the command execution has completed.</p>\n\n<pre><code>EXEC_REPLY: the command awaits user input - the reply() method can be called to provide an input.\n\nEXEC_MORE_OUTPUT: the command output buffer isn't big enough to hold all the results. In this case,\n    the next_response() method can be called to get the next block of the response.\n</code></pre>\n\n<p>When the status is either EXEC_REPLY or EXEC_MORE_OUTPUT, the cancel() method can be called to terminate\nthe command execution.</p>\n\n<p>Attributes:\n    command_text (str): the command text.\n    at_system_return_code (int) : the value of the system variable @SYSTEM.RETURN.CODE on the server.\n    at_selected (int): The value of the system variable @SELECTED on the server.</p>\n\n<p>Examples:</p>\n\n<pre><code>&gt;&gt;&gt; with uopy.connect(user='test', password='test'):\n&gt;&gt;&gt;     cmd = uopy.Command(\"LIST VOC\")\n&gt;&gt;&gt;     cmd.run()\n&gt;&gt;&gt;     print(cmd.response)\n\n&gt;&gt;&gt; with uopy.connect(user='test', password='test'):\n&gt;&gt;&gt;     cmd = uopy.Command(\"RUN BP SAYHELLOTO\")\n&gt;&gt;&gt;     if cmd.status == uopy.EXEC_REPLY:\n&gt;&gt;&gt;         cmd.reply(\"MV loyal user\")\n&gt;&gt;&gt;     print(cmd.response)\n</code></pre>\n", "bases": "uopy._uniobject.UniObject"}, {"fullname": "uopy.Command.__init__", "modulename": "uopy", "qualname": "Command.__init__", "kind": "function", "doc": "<p>Initialize a Command object</p>\n\n<p>Args:\n    command_text (str, optional): the TCL/ECL command to be executed on the remote server.\n    session (Session, optional): the Session object that the Command object is bound to.\n        If omitted, the last opened Session in the current thread will be used.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">command_text</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">session</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "uopy.Command.command_text", "modulename": "uopy", "qualname": "Command.command_text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uopy.Command.at_system_return_code", "modulename": "uopy", "qualname": "Command.at_system_return_code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uopy.Command.at_selected", "modulename": "uopy", "qualname": "Command.at_selected", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uopy.Command.status", "modulename": "uopy", "qualname": "Command.status", "kind": "variable", "doc": "<p>int: The current status of the Command object.</p>\n"}, {"fullname": "uopy.Command.response", "modulename": "uopy", "qualname": "Command.response", "kind": "variable", "doc": "<p>str: The current response of the Command object from the server.</p>\n"}, {"fullname": "uopy.Command.buffer_size", "modulename": "uopy", "qualname": "Command.buffer_size", "kind": "variable", "doc": "<p>int: The size of the output buffer for the Command object.</p>\n\n<p>If left unset, all the output of the command execution will be brought back at once.\nIf set explicitly, only the output of the specified size will be returned.</p>\n"}, {"fullname": "uopy.Command.run", "modulename": "uopy", "qualname": "Command.run", "kind": "function", "doc": "<p>Execute the command on the remote server.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Command.cancel", "modulename": "uopy", "qualname": "Command.cancel", "kind": "function", "doc": "<p>Cancel the execution of the command.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Command.reply", "modulename": "uopy", "qualname": "Command.reply", "kind": "function", "doc": "<p>Send a reply to the server to continue the command execution.</p>\n\n<p>Args:\n    reply_data: the input for the command.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reply_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Command.next_response", "modulename": "uopy", "qualname": "Command.next_response", "kind": "function", "doc": "<p>Get the next block of output from the server.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.DynArray", "modulename": "uopy", "qualname": "DynArray", "kind": "class", "doc": "<p>DynArray represents MV delimited data as nested lists and supports most common Python list methods.</p>\n\n<p>Specifically, a DynArray works with MV delimiters automatically and transparently. It can be used just like a Python\nlist and should only be used in that manner. It is a best practice that applications do not use MV delimiters\ndirectly for internationalization reasons. Please remember that a DynArray can be passed directly to any UOPY method\nwhere MV delimited data is expected, such as file.write(), the application doesn't need to convert it first.</p>\n\n<p>Two convenience methods: make_list and make_nested_list are provided to convert a field itself into a list or nested\nlist. They are useful if the original field is multivalued or multi-sub-valued, but may contain scalar values.\nCalling them first on a field will ensure that you can safely treat the field as a list or nested list.</p>\n\n<p>In addition, DynArray also supports two unique MV conversion functions: iconv and oconv. The details of these\nconversion functions are documented under each method. Because they call the remote server to do the conversion,\nit is strongly recommended that applications use File.read_named_fields() and File.write_named_fields() instead\nwhen reading data from or writing data to the server. They automatically perform the iconv and oconv on the\nspecified fields on the server, and thus save a rpc call across the network.</p>\n\n<p>Two DynArray objects can perform the mathematical operations of + and += the same way in which a python list does.\nHowever, if one of the two objects are not the DynArray type, it will throw the TypeError.</p>\n", "bases": "uopy._mvdelimited.MvDelimited"}, {"fullname": "uopy.DynArray.__init__", "modulename": "uopy", "qualname": "DynArray.__init__", "kind": "function", "doc": "<p>Initialize a DynArray object.</p>\n\n<p>Args:\n    obj (any, optional): can be a Python list, a string, a byte object, or another DynArray.\n    session (Session, optional): the Session object that the DynArray object is bound to.\n        If omitted, the last opened Session in the current thread will be used.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">session</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "uopy.DynArray.make_list", "modulename": "uopy", "qualname": "DynArray.make_list", "kind": "function", "doc": "<p>Check if the list item is a list itself - if not, make it as such.</p>\n\n<p>Args:\n    index (int): the index of the list item.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>d = uopy.DynArray([1, 2])\n      d.make_list(1)\n      d[1].append(3)\n      print(d.list)\n          [1, [2, 3]]</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.DynArray.make_nested_list", "modulename": "uopy", "qualname": "DynArray.make_nested_list", "kind": "function", "doc": "<p>Check if the list item is a nested list itself - if not, make it as such.</p>\n\n<p>Args:\n    index (int): the index of the list item.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>d = uopy.DynArray([1, 2])\n      d.make_nested_list(1)\n      d[1][0].append(3)\n      print(d.list)\n          [1, [[2, 3]]]</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.DynArray.iconv", "modulename": "uopy", "qualname": "DynArray.iconv", "kind": "function", "doc": "<p>Return the internal storage value of the DynArray based on the conversion code.</p>\n\n<p>Args:\n    conversion_code (str):  the MV conversion code.</p>\n\n<p>Returns:\n    DynArray: the internal storage value.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conversion_code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.DynArray.oconv", "modulename": "uopy", "qualname": "DynArray.oconv", "kind": "function", "doc": "<p>Return the output format of the DynArray based on the conversion code.</p>\n\n<p>Args:\n    conversion_code (str): the MV conversion code.</p>\n\n<p>Returns:\n    DynArray: the output format.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conversion_code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.DynArray.format", "modulename": "uopy", "qualname": "DynArray.format", "kind": "function", "doc": "<p>Return the formatted value of the DynArray based on the format code.</p>\n\n<p>Args:\n    format_code (str): the format code.</p>\n\n<p>Returns:\n    DynArray: the formatted value.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">format_code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.UOError", "modulename": "uopy", "qualname": "UOError", "kind": "class", "doc": "<p>UOError represents error conditions detected in UOPY.</p>\n\n<p>It is recommended that Applications always use a try/catch block when calling any UOPY function and should rely on\nthe code and message in UOError exception for proper error handling and reporting.</p>\n\n<p>Attributes:\n    message (str): the error message.\n    code (int): the error code; if the error is reported by the server, it is the server error code.</p>\n", "bases": "builtins.Exception"}, {"fullname": "uopy.UOError.__init__", "modulename": "uopy", "qualname": "UOError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "uopy.UOError.code", "modulename": "uopy", "qualname": "UOError.code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uopy.UOError.message", "modulename": "uopy", "qualname": "UOError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uopy.File", "modulename": "uopy", "qualname": "File", "kind": "class", "doc": "<p>File object represents a MV hashed file on the remote server. It is the main mechanism for applications to\naccess MV data remotely.</p>\n\n<p>File objects can be used in Python with statement so that whatever occurs in the with statement block, they\nare guaranteed to be closed upon exit.</p>\n\n<p>Examples:</p>\n\n<pre><code>&gt;&gt;&gt; with uopy.File(\"VOC\") as voc_file:\n&gt;&gt;&gt;     rec = voc_file.read(\"LIST\")\n&gt;&gt;&gt;     print(rec.list)\n</code></pre>\n", "bases": "uopy._uniobject.UniObject"}, {"fullname": "uopy.File.__init__", "modulename": "uopy", "qualname": "File.__init__", "kind": "function", "doc": "<p>Initializes a File object.\nArgs:\n    name (str): the name of the MV File to be opened.\n    dict_flag (int, optional): when it is uopy.DICT_FILE, then the File object points to the dictionary file.\n        Otherwise, the target is the data file.\n    session (Session, optional): the Session object that the File object is bound to.\n        If omitted, the last opened Session in the current thread will be used.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">dict_flag</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">session</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "uopy.File.handle", "modulename": "uopy", "qualname": "File.handle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uopy.File.status", "modulename": "uopy", "qualname": "File.status", "kind": "variable", "doc": "<p>The status code set by the remote server after a file operation.</p>\n"}, {"fullname": "uopy.File.is_opened", "modulename": "uopy", "qualname": "File.is_opened", "kind": "variable", "doc": "<p>boolean: True if the File object is opened on the remote server, otherwise False.</p>\n"}, {"fullname": "uopy.File.open", "modulename": "uopy", "qualname": "File.open", "kind": "function", "doc": "<p>Open the named file on the remote server.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.clear", "modulename": "uopy", "qualname": "File.clear", "kind": "function", "doc": "<p>Clear the content of the file on the remote server.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.close", "modulename": "uopy", "qualname": "File.close", "kind": "function", "doc": "<p>Close the opened file on the remote server - all file and record locks are released.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.delete", "modulename": "uopy", "qualname": "File.delete", "kind": "function", "doc": "<p>Delete a record in the file.</p>\n\n<p>Args:\n    record_id (any ): the record id - can be str, bytes, or DynArray.\n    lock_flag (int, optional): 0 (default), LOCK_RETAIN, LOCK_WAIT, or LOCK_RETAIN + LOCK_WAIT</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">lock_flag</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.read", "modulename": "uopy", "qualname": "File.read", "kind": "function", "doc": "<p>Read a record in the file.</p>\n\n<p>Args:\n    record_id (any): the record id - can be str, bytes, or DynArray.\n    lock_flag (int, optional): 0 (default, no lock), or [LOCK_EXCLUSIVE or LOCK_SHARED] [+ LOCK_WAIT]</p>\n\n<p>Returns:\n    DynArray: the content of the record.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">lock_flag</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.write", "modulename": "uopy", "qualname": "File.write", "kind": "function", "doc": "<p>Write a record into the file.</p>\n\n<p>Args:\n    record_id (any): the record id - can be str, bytes, or DynArray.\n    record (any): the record to be written - can be DynArray, str, bytes.\n    lock_flag (int, optional): 0 (default), LOCK_RETAIN, LOCK_WAIT, or LOCK_RETAIN + LOCK_WAIT</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">record</span>, </span><span class=\"param\"><span class=\"n\">lock_flag</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.read_field", "modulename": "uopy", "qualname": "File.read_field", "kind": "function", "doc": "<p>Read a single field of a record in the file.</p>\n\n<p>Args:\n    record_id (any ): the record id - can be str, bytes, or DynArray\n    field_num (int): the field number\n    lock_flag (int, optional): 0 (default), or [LOCK_EXCLUSIVE or LOCK_SHARED] [+ LOCK_WAIT]</p>\n\n<p>Returns:\n    DynArray: the value of the field.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">field_num</span>, </span><span class=\"param\"><span class=\"n\">lock_flag</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.write_field", "modulename": "uopy", "qualname": "File.write_field", "kind": "function", "doc": "<p>Write a single field of a record to the file.</p>\n\n<p>Args:\n    record_id (any): the record id - can be str, bytes, or DynArray.\n    field_num (int): the field number.\n    field_value (any): the field value to be written - can be DynArray, str, bytes.\n    lock_flag (int, optional): 0 (default), LOCK_RETAIN, LOCK_WAIT, or LOCK_RETAIN + LOCK_WAIT</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">field_num</span>, </span><span class=\"param\"><span class=\"n\">field_value</span>, </span><span class=\"param\"><span class=\"n\">lock_flag</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.lock_file", "modulename": "uopy", "qualname": "File.lock_file", "kind": "function", "doc": "<p>Lock the entire file exclusively.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.unlock_file", "modulename": "uopy", "qualname": "File.unlock_file", "kind": "function", "doc": "<p>Release the exclusive lock on the entire file.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.lock", "modulename": "uopy", "qualname": "File.lock", "kind": "function", "doc": "<p>Lock a record in the file.</p>\n\n<p>Args:\n    record_id (any): the record id - can be str, bytes, or DynArray.\n    lock_flag (int, optional): LOCK_EXCLUSIVE (default) or LOCK_SHARED</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">lock_flag</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.unlock", "modulename": "uopy", "qualname": "File.unlock", "kind": "function", "doc": "<p>Release locks owned by the current session on a record of the file.</p>\n\n<p>Args:\n    record_id (any): the record id - can be str, bytes, or DynArray.\n    clear_flag (boolean, optional): False (default), only release the lock on the specified record; otherwise,\n        release all the locks owned by the current session.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">clear_flag</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.is_locked", "modulename": "uopy", "qualname": "File.is_locked", "kind": "function", "doc": "<p>Check if a record has a lock on it.</p>\n\n<p>Args:\n    record_id (any): the record id - can be str, bytes, or DynArray.</p>\n\n<p>Returns:\n    boolean: True, a lock exists on the record by either the current session or other sessions.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.get_ak_info", "modulename": "uopy", "qualname": "File.get_ak_info", "kind": "function", "doc": "<p>Obtain information about the secondary key indexes available on the file.</p>\n\n<p>Args:\n    index_name (str, Optional). If this value is None or ignored, the list of available indices is returned.</p>\n\n<p>Returns:\n    DynArray:\n        The return value will vary depending on the type of index, as follows:\n        1. For D-Type indexes: Field 1 contains D as the first character and\n            Field 2 contains the location number of the indexed field.\n        2. For I-type indexes: Field 1 contains I as the first character,\n            Field 2 contains the I-type expression, and the compiled I-type resides in field 19 and onward.\n        3. For both types:\n            2nd value of Field 1 indicates if the index needs to be rebuilt. It is an empty string otherwise.\n            3rd value of Field 1 is set if the index is null-suppressed. It is an empty string otherwise.\n            4th value of Field 1 is set if automatic updates are disabled. It is an empty string otherwise.\n            6th value of Field 1 contains an S for single valued indices or M for a multivalued index.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.itype", "modulename": "uopy", "qualname": "File.itype", "kind": "function", "doc": "<p>Evaluates the specified I-descriptor and returns the evaluated string.</p>\n\n<p>Args:\n    record_id (any): the record id - can be str, bytes, or DynArray.\n    i_type_id (any): the I-descriptor record id in the dictionary - can be str, bytes, or DynArray.</p>\n\n<p>Returns:\n    DynArray: the evaluated result.</p>\n\n<p>Raises:\n  UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">i_type_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.read_named_fields", "modulename": "uopy", "qualname": "File.read_named_fields", "kind": "function", "doc": "<p>Read a list of named fields on multiple records.</p>\n\n<p>Note:\n    fields can be of D-type or I/V type.\n    If field_list contains names that are not defined in the dictionary, these names are replaced by @ID.\n    If a field has conv code on it, an oconv is automatically performed on its internal value to get the\n    converted output value.</p>\n\n<p>Args:\n    id_list: a list of record ids.\n    field_list: a list of field names.\n    lock_flag (int, optional): 0 (default, no lock), or [LOCK_EXCLUSIVE or LOCK_SHARED] [+ LOCK_WAIT]</p>\n\n<p>Returns:\n    tuple: a tuple consisting of four lists: 1. response code list, 2. status code list, 3. record id list,\n            4. record list.</p>\n\n<p>Raises:\n    UOFileError</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>with File(\"RENTAL_DETAILS\") as test_file:\n          field_list = [\"FULL_NAME\", \"ACTUAL_RETURN_DATE\", \"BALANCE_DUE\"]\n          id_list = ['1084', '1307', '1976']\n          read_rs = test_file.read_named_fields(id_list, field_list)\n          for l in read_rs:\n              print(l)\n          ['0', '0', '0']\n          ['0', '0', '0']\n          ['1084', '1307', '1976']\n          [['Karen McGlone', ['03/29/2010', '03/30/2010', '03/31/2010', '03/30/2010'], '3.50'],\n          ['Jamie Klink', ['05/05/2010', '05/07/2010', '05/05/2010', '05/07/2010', '05/05/2010'], '4.82'],\n          ['Mo Evans', ['08/23/2010', '08/20/2010', '08/26/2010', '08/22/2010', '08/25/2010', '08/22/2010'], '19.04']]</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_list</span>, </span><span class=\"param\"><span class=\"n\">field_list</span>, </span><span class=\"param\"><span class=\"n\">lock_flag</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.write_named_fields", "modulename": "uopy", "qualname": "File.write_named_fields", "kind": "function", "doc": "<p>Write a list of named fields to multiple records.</p>\n\n<p>Note:\n    If field_list contains names that are not defined in the dictionary, these names are ignored.\n    If a field is of I/V type or the record id itself, it is ignored.\n    If a field has CONV code on it, an iconv is automatically performed to use its internal value for the write.</p>\n\n<p>Args:\n    id_list: a list of record ids.\n    field_list: a list of field names.\n    field_data_list: a list of DynArray consisting of all the field values.\n    lock_flag (int, optional): 0 (default), LOCK_RETAIN, LOCK_WAIT, or LOCK_RETAIN + LOCK_WAIT</p>\n\n<p>Returns:\n    tuple: a tuple consisting of 4 lists: 1. response code list, 2. status code list, 3. record id list,\n            4. field values list.</p>\n\n<p>Raises:\n    UOError</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>with File(\"RENTAL_DETAILS\") as test_file:\n          field_list = [\"FULL_NAME\", \"ACTUAL_RETURN_DATE\", \"BALANCE_DUE\"]\n          id_list = ['1084', '1307', '1976']\n          field_value_list = [['Karen McGlone', ['03/29/2010', '03/30/2010', '03/31/2010', '03/30/2010'],\n          '3.50'], ['Jamie Klink', ['05/05/2010', '05/07/2010', '05/05/2010', '05/07/2010', '05/05/2010'], '4.82'],\n          ['Mo Evans', ['08/23/2010', '08/20/2010', '08/26/2010', '08/22/2010', '08/25/2010', '08/22/2010'],'19.04']]\n          write_rs = test_file.write_named_fields(id_list, field_list, field_value_list)\n          for l in write_rs:\n              print(l)\n          ['0', '0', '0']\n          ['0', '0', '0']\n          ['1084', '1307', '1976']\n          [['Karen McGlone', ['03/29/2010', '03/30/2010', '03/31/2010', '03/30/2010'], '3.50'], ['Jamie Klink',\n          ['05/05/2010', '05/07/2010', '05/05/2010', '05/07/2010', '05/05/2010'], '4.82'], ['Mo Evans',\n          ['08/23/2010', '08/20/2010', '08/26/2010', '08/22/2010', '08/25/2010', '08/22/2010'], '19.04']]</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_list</span>, </span><span class=\"param\"><span class=\"n\">field_list</span>, </span><span class=\"param\"><span class=\"n\">field_data_list</span>, </span><span class=\"param\"><span class=\"n\">lock_flag</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.read_records", "modulename": "uopy", "qualname": "File.read_records", "kind": "function", "doc": "<p>Read multiple records from the file.</p>\n\n<p>Args:\n    id_list: a list of record ids.\n    lock_flag (int, optional): 0 (default, no lock), or [LOCK_EXCLUSIVE or LOCK_SHARED] [+ LOCK_WAIT]</p>\n\n<p>Returns:\n    tuple: a tuple consisting of four lists: 1. response code list, 2. status code list, 3. record id list,\n            4. record list.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_list</span>, </span><span class=\"param\"><span class=\"n\">lock_flag</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.write_records", "modulename": "uopy", "qualname": "File.write_records", "kind": "function", "doc": "<p>Write multiple records into the file.</p>\n\n<p>Args:\n    id_list: a list of record ids.\n    record_list: a list of records.\n    lock_flag (int, optional): 0 (default), LOCK_RETAIN, LOCK_WAIT, or LOCK_RETAIN + LOCK_WAIT</p>\n\n<p>Returns:\n    tuple: a tuple consisting of four lists: 1. response code list, 2. status code list, 3. record id list,\n            4. record list.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_list</span>, </span><span class=\"param\"><span class=\"n\">record_list</span>, </span><span class=\"param\"><span class=\"n\">lock_flag</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.File.fileInfoEx", "modulename": "uopy", "qualname": "File.fileInfoEx", "kind": "function", "doc": "<p>Get information about the specified file\u2019s configuration, such as the\nfile\u2019s parameters, its modulus and load, its operating system file name, and its VOC name.\nThe information returned depends on the file type and the value of the key.</p>\n\n<p>After calling the method fileInfoEx, you can access these attributes to get their values.\nFor UV, these attributes will be available:\nisFileVar: 1 if file.variable is a valid file variable; 0 otherwise.\nvocName: VOC name of the file.\npathName: Path name of the file.\ntype: File type: 1 Static hashed | 3 Dynamic hashed | 4 Type 1 | 5 Sequential | 7 Distributed and Multivolume\nhashAlg: Hashing algorithm: 2 for GENERAL, 3 for SEQ.NUM.\nmodulus: Current modulus.\nminModulus: Minimum modulus.\ngroupSize: Group size, in 1-KB units.\nlargeRecordSize: Large record size.\nmergeLoad: Merge load parameter.\nsplitLoad: Split load parameter.\ncurrentLoad: Current loading of the file (%).\nnodeName: Empty string if the file resides on the local system. Otherwise, the name of the node where the file resides.\nisAKFile: 1 if secondary indexes exist on the file; 0 otherwise.\ncurrentLine: Current line number.\npartNum: For a distributed file, returns the list of currently open part numbers.\nfileStatus: For a distributed file, returns the list of status codes indicating whether the last I/O operation succeeded\n            or failed for each part. A value of \u20131 indicates the corresponding part file is not open.\nrecoveryType: 1 if the file is marked as recoverable, 0 if it is not. Returns an empty string\n              if recovery is not supported on the file type (such as type 1 and type 19 files).\nrecoveryId: Always returns an empty string.\nisFixedModulus: Always returns 0.\nnlsmap: If NLS is enabled, the file map name; otherwise an empty string.\n        If the map name is the default specified in the uvconfig file, the returned string is the map name followed by the name of the configurable parameter in parentheses.\nencryption: Returns a dynamic array containing the following information:\n            \u25aa For a file encrypted with the WHOLERECORD option:\n            -1@VM@VM\n            \u25aa For a file encrypted at the field level:\n            @VM@VM\n            @VM[@FM\n            ...@VM]\n            \u25aa Returns an empty string if the file is not encrypted.\nrepStatus: Return values can be:\n            0 \u2013 The file is not published, subscribed, or subwriteable.\n            1 \u2013 The file is being published.\n            2 \u2013 The file is being subscribed.\n            3 \u2013 The file is subwriteable.\n            Note: If U2 Data Replication is not running, this function\n            returns 0 for any file used with this function.\nFor UD, these attributes will be available:\nisFileVar: File open status. 1= Open, 0= Not open\nvocName: VOC name\npathName: Full path name of file\ntype: File type.\n        2 - HASHED\n        3 - DYNAMIC\n        4 - DIRECTORY\n        5 - SEQUENTIAL\n        7 - NFA\n        8 - OS\n        13 - EDA\nhashAlg: Hashing file type\n        HASH &amp; DYNAMI(KEYONLY) Hash type (0, 1, or 3)\n        DYNAMIC (KEYDATA) Hash type (32 , 33, or 35)\n        DYNAMIC (WHOLEFILE) Hash type (48, 49, or 51)\n        OTHERS\nmodulus: Modulo of file\nminModulus: Minimum modulo\ngroupSize: Group size of file\nlargeRecordSize: Block size of file\nmergeLoad: Merge factor percentage\nsplitLoad: Split factor percentage\ncurrentLoad: Current load percentage\nnodeName: Node name\nisAKFile: Does file contain alternate key indexes?\ncurrentLine: Next line number to read or write\npartNum: Part number\nfileStatus: Status\nrelname: Filename\nblksize: Block size of file\nprivilege: Access permissions\nwhichIndex: Index to which the last SETINDEX statement was applied\nwhatXValue: Index record read by last browsing statement, such as READFWD and READBCK\nisRecoverable: File type: recoverable or nonrecoverable\nisNumerical: Numeric keys\nisReplicated: Type of U2 Data Replication file\nbeforeUpdateTrigger: BEFORE-UPDATE-TRIGGER catalog program name of the file <xx>.\nbeforeDeleteTrigger: BEFORE-DELETE-TRIGGER catalog program name of the file <xx>.\nisEncrypted: Is the file encrypted?\nencinfo: Type of file encryption\nafterUpdateTrigger: AFTER-UPDATE-TRIGGER catalog program name of the file <xx>.\nafterDeleteTrigger: AFTER-DELETE-TRIGGER catalog program name of the file <xx>.\nis64bit: Defines the bit type</p>\n\n<p>Args: void</p>\n\n<p>Returns: void</p>\n\n<p>Raise:\n    UOError</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>f = uopy.File('TEST')\n      f.fileInfoEx()\n      print(f.vocName)\n      print(f.pathName)\n      print(f.groupSize)</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.SequentialFile", "modulename": "uopy", "qualname": "SequentialFile", "kind": "class", "doc": "<p>SequentialFile is used to define and manage MV Sequential Files (which are OS files).</p>\n\n<p>SequentialFile can be used in the Python with statement so that whatever occurs in the with statement block,\nthey are guaranteed to be closed upon exit.</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>with SequentialFile(\"BP\", \"TEST_SEQ\", True) as seq_file:\n        seq_file.write_line(\"This is test line 1\")\n        seq_file.write_line(\"This is test line 2\")\n        seq_file.seek(0) # go to the beginning of the file\n        seq_file.write_line(\"This is test line 0\") # overwrite the first line\n        seq_file.seek(0)\n        seq_file.read_line()\n            This is test line 0\n        seq_file.read_line()\n            This is test line 2</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "bases": "uopy._uniobject.UniObject"}, {"fullname": "uopy.SequentialFile.__init__", "modulename": "uopy", "qualname": "SequentialFile.__init__", "kind": "function", "doc": "<p>Initializes a SequentialFile object.</p>\n\n<p>Args:\n    file_name (str): the directory file name.\n    record_id (str): the sequential file name.\n    create_flag (boolean, optional): when False (default), do not create the file if nonexistent;\n        otherwise, create the file if nonexistent.\n    session (Session, optional): the Session object that the SequentialFile object is bound to.\n        If omitted, the last opened Session in the current thread will be used.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">create_flag</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">session</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "uopy.SequentialFile.status", "modulename": "uopy", "qualname": "SequentialFile.status", "kind": "variable", "doc": "<p>int: The status code set by the remote server after a sequential file operation.</p>\n"}, {"fullname": "uopy.SequentialFile.block_size", "modulename": "uopy", "qualname": "SequentialFile.block_size", "kind": "variable", "doc": "<p>int: The block size for read_block(). The default value is 8192.</p>\n\n<p>If left unset, read_block() will read the whole file back.\nIf set explicitly, it will be the maximum size of the data read_block() returns.</p>\n"}, {"fullname": "uopy.SequentialFile.timeout", "modulename": "uopy", "qualname": "SequentialFile.timeout", "kind": "variable", "doc": "<p>int: the timeout for sequential file operations.</p>\n"}, {"fullname": "uopy.SequentialFile.open", "modulename": "uopy", "qualname": "SequentialFile.open", "kind": "function", "doc": "<p>Open the server-side file, creating it if the create_flag is True and the file doesn't exist.</p>\n\n<p>Args:</p>\n\n<p>Returns:</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.SequentialFile.close", "modulename": "uopy", "qualname": "SequentialFile.close", "kind": "function", "doc": "<p>Close an opened sequential file.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.SequentialFile.seek", "modulename": "uopy", "qualname": "SequentialFile.seek", "kind": "function", "doc": "<p>Move the file pointer within the Sequential File by an offset position specified in bytes.</p>\n\n<p>Args:\n    offset (int): specifies the number of bytes before or after relative_pos.\n            A negative value moves the pointer to a position before aRelPos.\n    relative_pos (int): specifies the relative position within a file from which to seek. Default value is 0.\n            0 (default) start from the beginning of the file.\n            1 start from the current position.\n            2 start from the end of the file.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offset</span>, </span><span class=\"param\"><span class=\"n\">relative_pos</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.SequentialFile.write_eof", "modulename": "uopy", "qualname": "SequentialFile.write_eof", "kind": "function", "doc": "<p>Write an EOF marker to the sequential file.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.SequentialFile.write_block", "modulename": "uopy", "qualname": "SequentialFile.write_block", "kind": "function", "doc": "<p>Write the given block to the sequential file at the location currently set.</p>\n\n<p>Args:\n    blk_data (any): The data to write - can be str, bytes or DynArray.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">blk_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.SequentialFile.write_line", "modulename": "uopy", "qualname": "SequentialFile.write_line", "kind": "function", "doc": "<p>Write the given line to the sequential file at the location currently set.</p>\n\n<p>Args:\n    line_data (any): The data to write - can be str, bytes or DynArray.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.SequentialFile.read_line", "modulename": "uopy", "qualname": "SequentialFile.read_line", "kind": "function", "doc": "<p>Reads a line of data from the sequential file.</p>\n\n<p>The lines must be delimited with a newline character.</p>\n\n<p>status property will return one of the following values:\n-1    The file is not open for reading.\n0        The read was successful.\n1        The end of file was reached.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    str: the line of data read.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.SequentialFile.read_block", "modulename": "uopy", "qualname": "SequentialFile.read_block", "kind": "function", "doc": "<p>Reads a block of data from the sequential file.</p>\n\n<p>Upon completion, the status property will return one of the following values:\n-1    The file is not open for reading.\n0     The read was successful.\n1     The end of file was reached.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    bytes: the data block read.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary", "modulename": "uopy", "qualname": "Dictionary", "kind": "class", "doc": "<p>Dictionary provides convenient access to MV dictionary files.</p>\n", "bases": "uopy._file.File"}, {"fullname": "uopy.Dictionary.__init__", "modulename": "uopy", "qualname": "Dictionary.__init__", "kind": "function", "doc": "<p>Initialize a Dictionary object.</p>\n\n<p>Args:\n    name (str): the name of the MV file to be opened.\n    session (Session, optional): the Session object that the Dictionary object is bound to.\n        If omitted, the last opened Session in the current thread will be used.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">session</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "uopy.Dictionary.get_assoc", "modulename": "uopy", "qualname": "Dictionary.get_assoc", "kind": "function", "doc": "<p>Return the ASSOC field of the dictionary record.</p>\n\n<p>Args:\n    record_id (str or DynArray): the record id of the dictionary file.</p>\n\n<p>Returns:\n    DynArray: the value of the ASSOC field.</p>\n\n<p>Raises:\n    UOError.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.set_assoc", "modulename": "uopy", "qualname": "Dictionary.set_assoc", "kind": "function", "doc": "<p>Set the ASSOC field of the dictionary record.</p>\n\n<p>Args:\n    record_id (str or DynArray): the record id of the dictionary file.\n    assoc (str or DynArray): the value of the ASSOC field.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">assoc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.get_conv", "modulename": "uopy", "qualname": "Dictionary.get_conv", "kind": "function", "doc": "<p>Return the CONV field of the dictionary record.</p>\n\n<p>Args:\n    record_id (str or DynArray): the record id of the dictionary file.</p>\n\n<p>Returns:\n    DynArray: the value of the CONV field.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.set_conv", "modulename": "uopy", "qualname": "Dictionary.set_conv", "kind": "function", "doc": "<p>Set the CONV field of the dictionary record.</p>\n\n<p>Args:\n     record_id (str or DynArray): the record id of the dictionary file.\n     conv_code (str or DynArray): the value of the CONV field.</p>\n\n<p>Returns:\n     None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">conv_code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.get_format", "modulename": "uopy", "qualname": "Dictionary.get_format", "kind": "function", "doc": "<p>Return the FORMAT field of the dictionary record.</p>\n\n<p>Args:\n    record_id (str or DynArray): the record id of the dictionary file.</p>\n\n<p>Returns:\n    DynArray: the value of the FORMAT field.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.set_format", "modulename": "uopy", "qualname": "Dictionary.set_format", "kind": "function", "doc": "<p>Set the FORMAT field of the dictionary record.</p>\n\n<p>Args:\n     record_id (str or DynArray): the record id of the dictionary file.\n     format_code (str or DynArray): the value of the FORMAT field.</p>\n\n<p>Returns:\n     None</p>\n\n<p>Raises:\n     UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">format_code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.get_loc", "modulename": "uopy", "qualname": "Dictionary.get_loc", "kind": "function", "doc": "<p>Return the LOC field of the dictionary record.</p>\n\n<p>Args:\n    record_id (str or DynArray): the record id of the dictionary file.</p>\n\n<p>Returns:\n    DynArray: the value of the LOC field.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.set_loc", "modulename": "uopy", "qualname": "Dictionary.set_loc", "kind": "function", "doc": "<p>Set the LOC field of the dictionary record.</p>\n\n<p>Args:\n     record_id (str or DynArray): the record id of the dictionary file.\n     loc (str or DynArray): the value of the LOC field.</p>\n\n<p>Returns:\n     None</p>\n\n<p>Raises:\n     UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">loc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.get_name", "modulename": "uopy", "qualname": "Dictionary.get_name", "kind": "function", "doc": "<p>Return the NAME field of the dictionary record.</p>\n\n<p>Args:\n    record_id (str or DynArray): the record id of the dictionary file.</p>\n\n<p>Returns:\n    DynArray: the value of the NAME field.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.set_name", "modulename": "uopy", "qualname": "Dictionary.set_name", "kind": "function", "doc": "<p>Set the NAME field of the dictionary record.</p>\n\n<p>Args:\n     record_id (str or DynArray): the record id of the dictionary file.\n     name (str or DynArray): the value of the NAME field.</p>\n\n<p>Returns:\n     None</p>\n\n<p>Raises:\n     UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.get_sm", "modulename": "uopy", "qualname": "Dictionary.get_sm", "kind": "function", "doc": "<p>Return the SM field of the dictionary record.</p>\n\n<p>Args:\n    record_id (str or DynArray): the record id of the dictionary file.</p>\n\n<p>Returns:\n    DynArray: the value of the SM field.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.set_sm", "modulename": "uopy", "qualname": "Dictionary.set_sm", "kind": "function", "doc": "<p>Set the SM field of the dictionary record.</p>\n\n<p>Args:\n     record_id (str or DynArray): the record id of the dictionary file.\n     sm (str or DynArray): the value of the SM field.</p>\n\n<p>Returns:\n     None</p>\n\n<p>Raises:\n     UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">sm</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.get_sql_type", "modulename": "uopy", "qualname": "Dictionary.get_sql_type", "kind": "function", "doc": "<p>Return the SQLType field of the dictionary record.</p>\n\n<p>Args:\n    record_id (str or DynArray): the record id of the dictionary file.</p>\n\n<p>Returns:\n    DynArray: the value of the SQLType field.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.set_sql_type", "modulename": "uopy", "qualname": "Dictionary.set_sql_type", "kind": "function", "doc": "<p>Set the SQLType field of the dictionary record.</p>\n\n<p>Args:\n     record_id (str or DynArray): the record id of the dictionary file.\n     sql_type (str or DynArray): the value of the SQLType field.</p>\n\n<p>Returns:\n     None</p>\n\n<p>Raises:\n     UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">sql_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.get_type", "modulename": "uopy", "qualname": "Dictionary.get_type", "kind": "function", "doc": "<p>Return the TYPE field of the dictionary record.</p>\n\n<p>Args:\n    record_id (str or DynArray): the record id of the dictionary file.</p>\n\n<p>Returns:\n    DynArray: the value of the TYPE field.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Dictionary.set_type", "modulename": "uopy", "qualname": "Dictionary.set_type", "kind": "function", "doc": "<p>Set the TYPE field of the dictionary record.</p>\n\n<p>Args:\n     record_id (str or DynArray): the record id of the dictionary file.\n     field_type (str or DynArray): the value of the TYPE field.</p>\n\n<p>Returns:\n     None</p>\n\n<p>Raises:\n     UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record_id</span>, </span><span class=\"param\"><span class=\"n\">field_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.List", "modulename": "uopy", "qualname": "List", "kind": "class", "doc": "<p>List is used to control, access, and manipulate server side select lists.</p>\n\n<p>List is iterable - the iterator returns a DynArray object representing a record id.\nThe iteration can be run only once until the select list is exhausted - subsequent iteration yields nothing.</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>cmd = Command(\"SELECT VOC WITH F1 = 'V'\")\n      cmd.run()\n      select_list = List() # default is select list 0\n      ids = select_list.read_list()\n      print(ids[:5])\n          ['LOAD.LANG', 'BEGIN.WORK', 'CLEARSELECT', 'RELEASE.ITEMS', 'SET.WIDEZERO']</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "bases": "uopy._uniobject.UniObject"}, {"fullname": "uopy.List.__init__", "modulename": "uopy", "qualname": "List.__init__", "kind": "function", "doc": "<p>Initializes a new List object.</p>\n\n<p>Args:\n    list_no (int, optional): select list number (default is 0).\n    session (Session, optional): the Session object that the List object is bound to.\n        If omitted, the last opened Session in the current thread will be used.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">list_no</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">uopy</span><span class=\"o\">.</span><span class=\"n\">_session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "uopy.List.select", "modulename": "uopy", "qualname": "List.select", "kind": "function", "doc": "<p>Create a new select list by selecting the File object and generating a select list of\nall the record ids from that file. It will overwrite the previous select list and the select\nlist pointer will be reset to the first record id in the list.</p>\n\n<p>Args:\n    file_obj: File or Dictionary object to be selected.</p>\n\n<p>Returns:</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_obj</span><span class=\"p\">:</span> <span class=\"n\">uopy</span><span class=\"o\">.</span><span class=\"n\">_file</span><span class=\"o\">.</span><span class=\"n\">File</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.List.clear", "modulename": "uopy", "qualname": "List.clear", "kind": "function", "doc": "<p>Clear the selected list, emptying the contents and preparing for a new select list to be generated.</p>\n\n<p>Args:</p>\n\n<p>Returns:</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.List.next", "modulename": "uopy", "qualname": "List.next", "kind": "function", "doc": "<p>Return the next record ID in the select list.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    DynArray: The next record id in the select list, or None if exhausted.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.List.read_list", "modulename": "uopy", "qualname": "List.read_list", "kind": "function", "doc": "<p>Read the entire select list back.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    DynArray: contains all the record ids in the select list.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.List.form_list", "modulename": "uopy", "qualname": "List.form_list", "kind": "function", "doc": "<p>Create a new select list from the supplied list of record ids.</p>\n\n<p>The current select list number will be used as the new list number.</p>\n\n<p>Args:\n    ids (DynArray or list): A list of record ids.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ids</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.List.select_alternate_key", "modulename": "uopy", "qualname": "List.select_alternate_key", "kind": "function", "doc": "<p>Generate a select list from the given File based on the specified secondary index.</p>\n\n<p>Args:\n    file_obj (File): a File or a Dictionary object.\n    index_name (str): index name to select on.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_obj</span><span class=\"p\">:</span> <span class=\"n\">uopy</span><span class=\"o\">.</span><span class=\"n\">_file</span><span class=\"o\">.</span><span class=\"n\">File</span>, </span><span class=\"param\"><span class=\"n\">index_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.List.select_matching_ak", "modulename": "uopy", "qualname": "List.select_matching_ak", "kind": "function", "doc": "<p>Generate a select list from the given File based on the specified secondary index\nwhose value matches that of the named value.</p>\n\n<p>Args:\n    file_obj (File): a File or a Dictionary object.\n    index_name (str): index name to select on.\n    index_value (any): value within the index to select - can be str, bytes, DynArray.</p>\n\n<p>Returns:\n    None</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_obj</span><span class=\"p\">:</span> <span class=\"n\">uopy</span><span class=\"o\">.</span><span class=\"n\">_file</span><span class=\"o\">.</span><span class=\"n\">File</span>, </span><span class=\"param\"><span class=\"n\">index_name</span>, </span><span class=\"param\"><span class=\"n\">index_value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.Subroutine", "modulename": "uopy", "qualname": "Subroutine", "kind": "class", "doc": "<p>Subroutine allows the application to call a cataloged BASIC subroutine on the server.</p>\n\n<p>Arguments are used to both pass in data to and get back data from the cataloged subroutine.</p>\n\n<p>Attributes:\n    name (str): the name of the cataloged BASIC subroutine.\n    num_args (int): the number of arguments defined on the cataloged subroutine.\n    args (list): the argument list for the subroutine, an argument can be a str, a DynArray, a byte array.</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>sub = Subroutine(\"SAYHELLOTO\", 1)\n      sub.args[0] = \"David\"\n      print(sub.args)\n          ['David']\n      sub.call()\n      print(sub.args)\n          ['Hello, David']</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "bases": "uopy._uniobject.UniObject"}, {"fullname": "uopy.Subroutine.__init__", "modulename": "uopy", "qualname": "Subroutine.__init__", "kind": "function", "doc": "<p>Initialize a Subroutine object</p>\n\n<p>Args:\n    name (str): the name of the cataloged BASIC subroutine.\n    num_args (int) : the number of arguments defined on the cataloged subroutine.\n    session (Session, optional): the Session object that the Subroutine object is bound to.\n        If omitted, the last opened Session in the current thread will be used.</p>\n\n<p>Raises:\n    UOError</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">num_args</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">session</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "uopy.Subroutine.name", "modulename": "uopy", "qualname": "Subroutine.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uopy.Subroutine.num_args", "modulename": "uopy", "qualname": "Subroutine.num_args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uopy.Subroutine.args", "modulename": "uopy", "qualname": "Subroutine.args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uopy.Subroutine.call", "modulename": "uopy", "qualname": "Subroutine.call", "kind": "function", "doc": "<p>Run the catalogued subroutine using the args on the remote server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uopy.UOFileError", "modulename": "uopy", "qualname": "UOFileError", "kind": "class", "doc": "<p>This class extends the UOError class.\nThis class can provide each error information for each key read while invoking the uopy.File.read_named_fields method.</p>\n\n<p>Attributes:\nresponse_errors: a list of dictionaries.\nEach item in the list indicates the error information for each key read from the file.\nAn example of the content in response_errors is [{0: 'No Error'}, {30001: 'This Record was not found'}].</p>\n\n<p>id_list: a list of the file keys.\nAn example of the content in id_list is ['0111', 'bad_id']</p>\n", "bases": "uopy._uoerror.UOError"}, {"fullname": "uopy.UOFileError.__init__", "modulename": "uopy", "qualname": "UOFileError.__init__", "kind": "function", "doc": "<p>Initializes a UOFileError class.\nArgs:\n    code (int): error code\n    message (string, optinal): error message\n    response_codes (list, optional): a list of response codes returned from the server.\n    status_codes (list, optional): a list of status codes returned from the server.\n    id_list (list, optional): a list of file fields.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">code</span><span class=\"o\">=</span><span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response_codes</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">status_codes</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">id_list</span><span class=\"o\">=</span><span class=\"p\">[]</span></span>)</span>"}, {"fullname": "uopy.UOFileError.response_errors", "modulename": "uopy", "qualname": "UOFileError.response_errors", "kind": "variable", "doc": "<p>A list of errors for each field. Each error contains a code and a message.</p>\n"}, {"fullname": "uopy.UOFileError.id_list", "modulename": "uopy", "qualname": "UOFileError.id_list", "kind": "variable", "doc": "<p>A list of fields.</p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();